/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/andy2046/k8s-custom-resource-watch/pkg/apis/customresource/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CustomResourceLister helps list CustomResources.
type CustomResourceLister interface {
	// List lists all CustomResources in the indexer.
	List(selector labels.Selector) (ret []*v1.CustomResource, err error)
	// CustomResources returns an object that can list and get CustomResources.
	CustomResources(namespace string) CustomResourceNamespaceLister
	CustomResourceListerExpansion
}

// customResourceLister implements the CustomResourceLister interface.
type customResourceLister struct {
	indexer cache.Indexer
}

// NewCustomResourceLister returns a new CustomResourceLister.
func NewCustomResourceLister(indexer cache.Indexer) CustomResourceLister {
	return &customResourceLister{indexer: indexer}
}

// List lists all CustomResources in the indexer.
func (s *customResourceLister) List(selector labels.Selector) (ret []*v1.CustomResource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.CustomResource))
	})
	return ret, err
}

// CustomResources returns an object that can list and get CustomResources.
func (s *customResourceLister) CustomResources(namespace string) CustomResourceNamespaceLister {
	return customResourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CustomResourceNamespaceLister helps list and get CustomResources.
type CustomResourceNamespaceLister interface {
	// List lists all CustomResources in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.CustomResource, err error)
	// Get retrieves the CustomResource from the indexer for a given namespace and name.
	Get(name string) (*v1.CustomResource, error)
	CustomResourceNamespaceListerExpansion
}

// customResourceNamespaceLister implements the CustomResourceNamespaceLister
// interface.
type customResourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CustomResources in the indexer for a given namespace.
func (s customResourceNamespaceLister) List(selector labels.Selector) (ret []*v1.CustomResource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.CustomResource))
	})
	return ret, err
}

// Get retrieves the CustomResource from the indexer for a given namespace and name.
func (s customResourceNamespaceLister) Get(name string) (*v1.CustomResource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("customresource"), name)
	}
	return obj.(*v1.CustomResource), nil
}
